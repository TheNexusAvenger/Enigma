--Tests DeserializeOpenVrInputs.
--!strict

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local DeserializeOpenVrInputs = require(ReplicatedStorage.Enigma.Serialization.DeserializeOpenVrInputs)

return function()
    describe("The DeserializeOpenVrInputs function with protocol version 1", function()
        it("should return 0 inputs.", function()
            expect(#DeserializeOpenVrInputs("1|0")).to.equal(0)
        end)

        it("should return multiple inputs.", function()
            local Tracker1Data = "0|1|2|3|4|5|6|7|8|9|10"
            local Tracker2Data = "4|11|12|13|14|15|16|17|18|19|20"
            local Inputs = DeserializeOpenVrInputs(`1|2|{Tracker1Data}|{Tracker2Data}`)
            expect(#Inputs).to.equal(2)
            expect(Inputs[1].TrackerRole).to.equal("None")
            expect(Inputs[1].HeadRelativeCFrame.X).to.equal(1)
            expect(Inputs[1].HeadRelativeCFrame.Y).to.equal(2)
            expect(Inputs[1].HeadRelativeCFrame.Z).to.equal(3)
            expect(Inputs[1].HeadRelativeVelocity.X).to.equal(8)
            expect(Inputs[1].HeadRelativeVelocity.Y).to.equal(9)
            expect(Inputs[1].HeadRelativeVelocity.Z).to.equal(10)
            expect(Inputs[2].TrackerRole).to.equal("LeftShoulder")
            expect(Inputs[2].HeadRelativeCFrame.X).to.equal(11)
            expect(Inputs[2].HeadRelativeCFrame.Y).to.equal(12)
            expect(Inputs[2].HeadRelativeCFrame.Z).to.equal(13)
            expect(Inputs[2].HeadRelativeVelocity.X).to.equal(18)
            expect(Inputs[2].HeadRelativeVelocity.Y).to.equal(19)
            expect(Inputs[2].HeadRelativeVelocity.Z).to.equal(20)
        end)
    end)

    describe("The DeserializeOpenVrInputs function with protocol version 2", function()
        it("should return 0 inputs.", function()
            expect(#DeserializeOpenVrInputs("2|0")).to.equal(0)
        end)

        it("should return multiple inputs with any order.", function()
            local Tracker1Data = "4|0|1|0|1|3|1|2|3|2|4|4|5|6|7|3|3|8|9|10"
            local Tracker2Data = "4|2|4|14|15|16|17|1|3|11|12|13|3|3|18|19|20|0|1|4"
            local Inputs = DeserializeOpenVrInputs(`2|2|{Tracker1Data}|{Tracker2Data}`)
            expect(#Inputs).to.equal(2)
            expect(Inputs[1].TrackerRole).to.equal("None")
            expect(Inputs[1].HeadRelativeCFrame.X).to.equal(1)
            expect(Inputs[1].HeadRelativeCFrame.Y).to.equal(2)
            expect(Inputs[1].HeadRelativeCFrame.Z).to.equal(3)
            expect(Inputs[1].HeadRelativeVelocity.X).to.equal(8)
            expect(Inputs[1].HeadRelativeVelocity.Y).to.equal(9)
            expect(Inputs[1].HeadRelativeVelocity.Z).to.equal(10)
            expect(Inputs[2].TrackerRole).to.equal("LeftShoulder")
            expect(Inputs[2].HeadRelativeCFrame.X).to.equal(11)
            expect(Inputs[2].HeadRelativeCFrame.Y).to.equal(12)
            expect(Inputs[2].HeadRelativeCFrame.Z).to.equal(13)
            expect(Inputs[2].HeadRelativeVelocity.X).to.equal(18)
            expect(Inputs[2].HeadRelativeVelocity.Y).to.equal(19)
            expect(Inputs[2].HeadRelativeVelocity.Z).to.equal(20)
        end)

        it("should return multiple inputs with missing properties.", function()
            local Tracker1Data = "0"
            local Tracker2Data = "2|1|3|11|12|13|0|1|4"
            local Inputs = DeserializeOpenVrInputs(`2|2|{Tracker1Data}|{Tracker2Data}`)
            expect(#Inputs).to.equal(2)
            expect(Inputs[1].TrackerRole).to.equal("Unsupported")
            expect(Inputs[1].HeadRelativeCFrame.X).to.equal(0)
            expect(Inputs[1].HeadRelativeCFrame.Y).to.equal(0)
            expect(Inputs[1].HeadRelativeCFrame.Z).to.equal(0)
            expect(Inputs[1].HeadRelativeVelocity.X).to.equal(0)
            expect(Inputs[1].HeadRelativeVelocity.Y).to.equal(0)
            expect(Inputs[1].HeadRelativeVelocity.Z).to.equal(0)
            expect(Inputs[2].TrackerRole).to.equal("LeftShoulder")
            expect(Inputs[2].HeadRelativeCFrame.X).to.equal(11)
            expect(Inputs[2].HeadRelativeCFrame.Y).to.equal(12)
            expect(Inputs[2].HeadRelativeCFrame.Z).to.equal(13)
            expect(Inputs[2].HeadRelativeVelocity.X).to.equal(0)
            expect(Inputs[2].HeadRelativeVelocity.Y).to.equal(0)
            expect(Inputs[2].HeadRelativeVelocity.Z).to.equal(0)
        end)
    end)
    
    describe("The DeserializeOpenVrInputs function with protocol version 3 or higher", function()
        it("should return inputs with extra properties.", function()
            local Tracker1Data = "5|0|1|0|1|3|1|2|3|2|4|4|5|6|7|3|3|8|9|10|4|2|6|9"
            local Tracker2Data = "5|2|4|14|15|16|17|1|3|11|12|13|4|2|6|9|3|3|18|19|20|0|1|4"
            local Inputs = DeserializeOpenVrInputs(`3|2|{Tracker1Data}|{Tracker2Data}`)
            expect(#Inputs).to.equal(2)
            expect(Inputs[1].TrackerRole).to.equal("None")
            expect(Inputs[1].HeadRelativeCFrame.X).to.equal(1)
            expect(Inputs[1].HeadRelativeCFrame.Y).to.equal(2)
            expect(Inputs[1].HeadRelativeCFrame.Z).to.equal(3)
            expect(Inputs[1].HeadRelativeVelocity.X).to.equal(8)
            expect(Inputs[1].HeadRelativeVelocity.Y).to.equal(9)
            expect(Inputs[1].HeadRelativeVelocity.Z).to.equal(10)
            expect(Inputs[2].TrackerRole).to.equal("LeftShoulder")
            expect(Inputs[2].HeadRelativeCFrame.X).to.equal(11)
            expect(Inputs[2].HeadRelativeCFrame.Y).to.equal(12)
            expect(Inputs[2].HeadRelativeCFrame.Z).to.equal(13)
            expect(Inputs[2].HeadRelativeVelocity.X).to.equal(18)
            expect(Inputs[2].HeadRelativeVelocity.Y).to.equal(19)
            expect(Inputs[2].HeadRelativeVelocity.Z).to.equal(20)
        end)
    end)
end